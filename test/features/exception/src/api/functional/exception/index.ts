/**
 * @packageDocumentation
 * @module api.functional.exception
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection, Primitive } from "@nestia/fetcher";

import type { IBbsArticle } from "./../../structures/IBbsArticle";

/**
 * @throws 400 invalid request
 * @throws 404 unable to find the matched section
 * @throws 428
 * @throws 5XX internal server error
 * 
 * @controller ExceptionController.typed()
 * @path POST /exception/:section/typed
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function typed(
    connection: IConnection,
    section: string,
    input: typed.Input,
): Promise<typed.Output> {
    return Fetcher.fetch(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "application/json",
            },
        },
        typed.ENCRYPTED,
        typed.METHOD,
        typed.path(section),
        input,
    );
}
export namespace typed {
    export type Input = Primitive<IBbsArticle.IStore>;
    export type Output = Primitive<IBbsArticle>;

    export const METHOD = "POST" as const;
    export const PATH: string = "/exception/:section/typed";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (section: string): string => {
        return `/exception/${encodeURIComponent(section ?? "null")}/typed`;
    }
}

/**
 * 
 * @throws 400 invalid request
 * @throws 404 unable to find the matched section
 * @throw 428 unable to process the request
 * @throw 5XX internal server error
 * 
 * @controller ExceptionController.tags()
 * @path POST /exception/:section/tags
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function tags(
    connection: IConnection,
    section: string,
    input: tags.Input,
): Promise<tags.Output> {
    return Fetcher.fetch(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "application/json",
            },
        },
        tags.ENCRYPTED,
        tags.METHOD,
        tags.path(section),
        input,
    );
}
export namespace tags {
    export type Input = Primitive<IBbsArticle.IStore>;
    export type Output = Primitive<IBbsArticle>;

    export const METHOD = "POST" as const;
    export const PATH: string = "/exception/:section/tags";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (section: string): string => {
        return `/exception/${encodeURIComponent(section ?? "null")}/tags`;
    }
}

/**
 * 
 * @throws 400 invalid request
 * @throws 404 unable to find the matched section
 * @throw 428 unable to process the request
 * @throw 5XX internal server error
 * 
 * @controller ExceptionController.composite()
 * @path POST /exception/:section/composite
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function composite(
    connection: IConnection,
    section: string,
    input: composite.Input,
): Promise<composite.Output> {
    return Fetcher.fetch(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "application/json",
            },
        },
        composite.ENCRYPTED,
        composite.METHOD,
        composite.path(section),
        input,
    );
}
export namespace composite {
    export type Input = Primitive<IBbsArticle.IStore>;
    export type Output = Primitive<IBbsArticle>;

    export const METHOD = "POST" as const;
    export const PATH: string = "/exception/:section/composite";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (section: string): string => {
        return `/exception/${encodeURIComponent(section ?? "null")}/composite`;
    }
}