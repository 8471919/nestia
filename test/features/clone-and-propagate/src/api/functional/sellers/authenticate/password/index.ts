/**
 * @packageDocumentation
 * @module api.functional.sellers.authenticate.password
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type {
  IConnection,
  Primitive,
  IPropagation,
  HttpError,
} from "@nestia/fetcher";
import { EncryptedFetcher } from "@nestia/fetcher/lib/EncryptedFetcher";
import typia from "typia";

import type { ISeller } from "../../../../structures/ISeller";
import { NestiaSimulator } from "../../../../utils/NestiaSimulator";

/**
 * Change password.
 *
 * @param input Old and new passwords
 * @return Empty object
 *
 * @controller SellerAuthenticateController.change
 * @path PATCH /sellers/authenticate/password/change
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function change(
  connection: IConnection,
  input: change.Input,
): Promise<change.Output> {
  return !!connection.simulate
    ? change.simulate(connection, input)
    : EncryptedFetcher.propagate(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "text/plain",
          },
        },
        {
          ...change.METADATA,
          path: change.path(),
        },
        input,
      );
}
export namespace change {
  export type Input = Primitive<ISeller.IChangePassword>;
  export type Output = IPropagation<{
    200: undefined;
  }>;

  export const METADATA = {
    method: "PATCH",
    path: "/sellers/authenticate/password/change",
    request: {
      type: "text/plain",
      encrypted: true,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/sellers/authenticate/password/change";
  export const random = (g?: Partial<typia.IRandomGenerator>) =>
    typia.random<Primitive<undefined>>(g);
  export const simulate = (
    connection: IConnection,
    input: change.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(input));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}
