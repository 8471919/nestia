/**
 * @packageDocumentation
 * @module api.functional.param
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";

/**
 * @controller TypedParamController.boolean()
 * @path GET /param/:value/boolean
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function boolean
    (
        connection: IConnection,
        value: false | true
    ): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        boolean.ENCRYPTED,
        boolean.METHOD,
        boolean.path(value)
    );
}
export namespace boolean
{

    export const METHOD = "GET" as const;
    export const PATH: string = "/param/:value/boolean";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(value: false | true): string
    {
        return `/param/${encodeURIComponent(value)}/boolean`;
    }
}

/**
 * @controller TypedParamController.number()
 * @path GET /param/:value/number
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function number
    (
        connection: IConnection,
        value: number
    ): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        number.ENCRYPTED,
        number.METHOD,
        number.path(value)
    );
}
export namespace number
{

    export const METHOD = "GET" as const;
    export const PATH: string = "/param/:value/number";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(value: number): string
    {
        return `/param/${encodeURIComponent(value)}/number`;
    }
}

/**
 * @controller TypedParamController.string()
 * @path GET /param/:value/string
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function string
    (
        connection: IConnection,
        value: string
    ): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        string.ENCRYPTED,
        string.METHOD,
        string.path(value)
    );
}
export namespace string
{

    export const METHOD = "GET" as const;
    export const PATH: string = "/param/:value/string";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(value: string): string
    {
        return `/param/${encodeURIComponent(value)}/string`;
    }
}

/**
 * @controller TypedParamController.literal()
 * @path GET /param/:value/literal
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function literal
    (
        connection: IConnection,
        value: "A" | "B" | "C"
    ): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        literal.ENCRYPTED,
        literal.METHOD,
        literal.path(value)
    );
}
export namespace literal
{

    export const METHOD = "GET" as const;
    export const PATH: string = "/param/:value/literal";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(value: "A" | "B" | "C"): string
    {
        return `/param/${encodeURIComponent(value)}/literal`;
    }
}