/**
 * @packageDocumentation
 * @module api.functional
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection, Primitive } from "@nestia/fetcher";

import type { IToken } from "./../structures/IToken";

/**
 * @controller SecurityController.basic()
 * @path GET /basic
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function basic(
    connection: IConnection,
): Promise<basic.Output> {
    return Fetcher.fetch(
        connection,
        basic.ENCRYPTED,
        basic.METHOD,
        basic.path(),
    );
}
export namespace basic {
    export type Output = Primitive<IToken>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/basic";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/basic`;
    }
}

/**
 * 
 * @security basic
 * 
 * @controller SecurityController.basic_by_comment()
 * @path GET /basic_by_comment
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function basic_by_comment(
    connection: IConnection,
): Promise<basic_by_comment.Output> {
    return Fetcher.fetch(
        connection,
        basic_by_comment.ENCRYPTED,
        basic_by_comment.METHOD,
        basic_by_comment.path(),
    );
}
export namespace basic_by_comment {
    export type Output = Primitive<IToken>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/basic_by_comment";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/basic_by_comment`;
    }
}

/**
 * @controller SecurityController.bearer()
 * @path GET /bearer
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function bearer(
    connection: IConnection,
): Promise<bearer.Output> {
    return Fetcher.fetch(
        connection,
        bearer.ENCRYPTED,
        bearer.METHOD,
        bearer.path(),
    );
}
export namespace bearer {
    export type Output = Primitive<IToken>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/bearer";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/bearer`;
    }
}

/**
 * 
 * @security bearer
 * 
 * @controller SecurityController.bearer_by_comment()
 * @path GET /bearer_by_comment
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function bearer_by_comment(
    connection: IConnection,
): Promise<bearer_by_comment.Output> {
    return Fetcher.fetch(
        connection,
        bearer_by_comment.ENCRYPTED,
        bearer_by_comment.METHOD,
        bearer_by_comment.path(),
    );
}
export namespace bearer_by_comment {
    export type Output = Primitive<IToken>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/bearer_by_comment";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/bearer_by_comment`;
    }
}

/**
 * @controller SecurityController.oauth2()
 * @path GET /oauth2
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function oauth2(
    connection: IConnection,
): Promise<oauth2.Output> {
    return Fetcher.fetch(
        connection,
        oauth2.ENCRYPTED,
        oauth2.METHOD,
        oauth2.path(),
    );
}
export namespace oauth2 {
    export type Output = Primitive<IToken>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/oauth2";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/oauth2`;
    }
}

/**
 * 
 * @security oauth2 write:pets read:pets
 * 
 * @controller SecurityController.oauth2_by_comment()
 * @path GET /oauth2_by_comment
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function oauth2_by_comment(
    connection: IConnection,
): Promise<oauth2_by_comment.Output> {
    return Fetcher.fetch(
        connection,
        oauth2_by_comment.ENCRYPTED,
        oauth2_by_comment.METHOD,
        oauth2_by_comment.path(),
    );
}
export namespace oauth2_by_comment {
    export type Output = Primitive<IToken>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/oauth2_by_comment";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/oauth2_by_comment`;
    }
}

/**
 * @controller SecurityController.security()
 * @path GET /security
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function security(
    connection: IConnection,
): Promise<security.Output> {
    return Fetcher.fetch(
        connection,
        security.ENCRYPTED,
        security.METHOD,
        security.path(),
    );
}
export namespace security {
    export type Output = Primitive<IToken>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/security";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/security`;
    }
}