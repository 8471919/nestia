/**
 * @packageDocumentation
 * @module api.functional.query
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection, Primitive } from "@nestia/fetcher";

import type { IQuery } from "./../../structures/IQuery";
import type { INestQuery } from "./../../structures/INestQuery";

/**
 * @controller QueryController.typed()
 * @path GET /query/typed
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function typed(
    connection: IConnection,
    query: typed.Query,
): Promise<typed.Output> {
    return Fetcher.fetch(
        connection,
        typed.ENCRYPTED,
        typed.METHOD,
        typed.path(query),
    );
}
export namespace typed {
    export type Query = Primitive<IQuery>;
    export type Output = Primitive<IQuery>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/query/typed";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (query: typed.Query): string => {
        const variables: Record<any, any> = query as any;
        const search: URLSearchParams = new URLSearchParams();
        for (const [key, value] of Object.entries(variables))
            if (value === undefined) continue;
            else if (Array.isArray(value))
                value.forEach((elem) => search.append(key, String(elem)));
            else
                search.set(key, String(value));
        const encoded: string = search.toString();
        return `/query/typed${encoded.length ? `?${encoded}` : ""}`;;
    }
}

/**
 * @controller QueryController.nest()
 * @path GET /query/nest
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function nest(
    connection: IConnection,
    query: nest.Query,
): Promise<nest.Output> {
    return Fetcher.fetch(
        connection,
        nest.ENCRYPTED,
        nest.METHOD,
        nest.path(query),
    );
}
export namespace nest {
    export type Query = Primitive<INestQuery>;
    export type Output = Primitive<IQuery>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/query/nest";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (query: nest.Query): string => {
        const variables: Record<any, any> = query as any;
        const search: URLSearchParams = new URLSearchParams();
        for (const [key, value] of Object.entries(variables))
            if (value === undefined) continue;
            else if (Array.isArray(value))
                value.forEach((elem) => search.append(key, String(elem)));
            else
                search.set(key, String(value));
        const encoded: string = search.toString();
        return `/query/nest${encoded.length ? `?${encoded}` : ""}`;;
    }
}

/**
 * @controller QueryController.individual()
 * @path GET /query/individual
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function individual(
    connection: IConnection,
    id: string,
): Promise<individual.Output> {
    return Fetcher.fetch(
        connection,
        individual.ENCRYPTED,
        individual.METHOD,
        individual.path(id),
    );
}
export namespace individual {
    export type Output = Primitive<string>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/query/individual";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (id: string): string => {
        const variables: Record<any, any> = 
        {
            id
        } as any;
        const search: URLSearchParams = new URLSearchParams();
        for (const [key, value] of Object.entries(variables))
            if (value === undefined) continue;
            else if (Array.isArray(value))
                value.forEach((elem) => search.append(key, String(elem)));
            else
                search.set(key, String(value));
        const encoded: string = search.toString();
        return `/query/individual${encoded.length ? `?${encoded}` : ""}`;;
    }
}

/**
 * @controller QueryController.composite()
 * @path GET /query/composite
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function composite(
    connection: IConnection,
    atomic: string,
    query: composite.Query,
): Promise<composite.Output> {
    return Fetcher.fetch(
        connection,
        composite.ENCRYPTED,
        composite.METHOD,
        composite.path(atomic, query),
    );
}
export namespace composite {
    export type Query = Primitive<Omit<IQuery, "atomic">>;
    export type Output = Primitive<IQuery>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/query/composite";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (atomic: string, query: composite.Query): string => {
        const variables: Record<any, any> = 
        {
            ...query,
            atomic,
        } as any;
        const search: URLSearchParams = new URLSearchParams();
        for (const [key, value] of Object.entries(variables))
            if (value === undefined) continue;
            else if (Array.isArray(value))
                value.forEach((elem) => search.append(key, String(elem)));
            else
                search.set(key, String(value));
        const encoded: string = search.toString();
        return `/query/composite${encoded.length ? `?${encoded}` : ""}`;;
    }
}