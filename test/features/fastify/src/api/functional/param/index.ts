/**
 * @packageDocumentation
 * @module api.functional.param
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher, Primitive } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";

/**
 * @controller TypedParamController.boolean()
 * @path GET /param/:value/boolean
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function boolean (
        connection: IConnection,
        value: false | true
    ): Promise<boolean.Output> {
    return  Fetcher.fetch(
            connection,
            boolean.ENCRYPTED,
            boolean.METHOD,
            boolean.path(value)
        );
}
export namespace boolean {
    export type Output = Primitive<false | true>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/param/:value/boolean";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(value: false | true): string {
        return `/param/${encodeURIComponent(value ?? "null")}/boolean`;
    }
}

/**
 * @controller TypedParamController.number()
 * @path GET /param/:value/number
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function number (
        connection: IConnection,
        value: number
    ): Promise<number.Output> {
    return  Fetcher.fetch(
            connection,
            number.ENCRYPTED,
            number.METHOD,
            number.path(value)
        );
}
export namespace number {
    export type Output = Primitive<number>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/param/:value/number";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(value: number): string {
        return `/param/${encodeURIComponent(value ?? "null")}/number`;
    }
}

/**
 * @controller TypedParamController.string()
 * @path GET /param/:value/string
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function string (
        connection: IConnection,
        value: string
    ): Promise<string.Output> {
    return  Fetcher.fetch(
            connection,
            string.ENCRYPTED,
            string.METHOD,
            string.path(value)
        );
}
export namespace string {
    export type Output = Primitive<string>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/param/:value/string";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(value: string): string {
        return `/param/${encodeURIComponent(value ?? "null")}/string`;
    }
}

/**
 * @controller TypedParamController.nullable()
 * @path GET /param/:value/nullable
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function nullable (
        connection: IConnection,
        value: null | string
    ): Promise<nullable.Output> {
    return  Fetcher.fetch(
            connection,
            nullable.ENCRYPTED,
            nullable.METHOD,
            nullable.path(value)
        );
}
export namespace nullable {
    export type Output = Primitive<null | string>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/param/:value/nullable";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(value: null | string): string {
        return `/param/${encodeURIComponent(value ?? "null")}/nullable`;
    }
}

/**
 * @controller TypedParamController.literal()
 * @path GET /param/:value/literal
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function literal (
        connection: IConnection,
        value: "A" | "B" | "C"
    ): Promise<literal.Output> {
    return  Fetcher.fetch(
            connection,
            literal.ENCRYPTED,
            literal.METHOD,
            literal.path(value)
        );
}
export namespace literal {
    export type Output = Primitive<"A" | "B" | "C">;

    export const METHOD = "GET" as const;
    export const PATH: string = "/param/:value/literal";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(value: "A" | "B" | "C"): string {
        return `/param/${encodeURIComponent(value ?? "null")}/literal`;
    }
}