/**
 * @packageDocumentation
 * @module api.functional.performance
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { _singlequote_process_singlequote_ } from "../../structures/_singlequote_process_singlequote_";

/**
 * @controller [object Object]
 * @path GET /performance/cpu
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function cpu(
    connection: IConnection,
): Promise<cpu.Output> {
    return !!connection.simulate
        ? cpu.simulate(
              connection,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...cpu.METADATA,
                  path: cpu.path(),
              } as const,
          );
}
export namespace cpu {
    export type Output = Primitive<_singlequote_process_singlequote_.global.NodeJS.CpuUsage>;

    export const METADATA = {
        method: "GET",
        path: "/performance/cpu",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/performance/cpu`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
    ): Promise<Output> => {
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * @controller [object Object]
 * @path GET /performance/memory
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function memory(
    connection: IConnection,
): Promise<memory.Output> {
    return !!connection.simulate
        ? memory.simulate(
              connection,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...memory.METADATA,
                  path: memory.path(),
              } as const,
          );
}
export namespace memory {
    export type Output = Primitive<_singlequote_process_singlequote_.global.NodeJS.MemoryUsage>;

    export const METADATA = {
        method: "GET",
        path: "/performance/memory",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/performance/memory`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
    ): Promise<Output> => {
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * @controller [object Object]
 * @path GET /performance/resource
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function resource(
    connection: IConnection,
): Promise<resource.Output> {
    return !!connection.simulate
        ? resource.simulate(
              connection,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...resource.METADATA,
                  path: resource.path(),
              } as const,
          );
}
export namespace resource {
    export type Output = Primitive<_singlequote_process_singlequote_.global.NodeJS.ResourceUsage>;

    export const METADATA = {
        method: "GET",
        path: "/performance/resource",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/performance/resource`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
    ): Promise<Output> => {
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}