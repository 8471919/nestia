{
  "openapi": "3.0.1",
  "servers": [
    {
      "url": "http://localhost:37293",
      "description": "Example Server for Swagger Connectors"
    }
  ],
  "info": {
    "version": "0.11.0",
    "title": "@wrtn/hub-backend",
    "description": "Hub Backend",
    "license": {
      "name": "COMMERCIAL"
    }
  },
  "paths": {
    "/accumulate": {
      "post": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "description": "The value to add",
          "content": {
            "application/json": {
              "schema": {
                "type": "number"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Added value",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "summary": "Add value to accumulator",
        "description": "Add value to accumulator.\n\nAdd the given value to the accumulator and return the new value."
      },
      "get": {
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Accumulated value",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "summary": "Get accumulated value",
        "description": "Get accumulated value.\n\nReturns the accumulated value."
      },
      "delete": {
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Reset accumulated value",
        "description": "Reset accumulated value.\n\nReset the accumulated value to 0."
      }
    },
    "/bbs/articles": {
      "patch": {
        "tags": [
          "BBS"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination and searching options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IBbsArticle.IRequestIBbsArticle.IRequest.ISearchIBbsArticle.IRequest.SortableColumns"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated summarized articles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIBbsArticle.ISummary"
                }
              }
            }
          }
        },
        "summary": "List up all summarized articles",
        "description": "List up all summarized articles.\n\nList up all summarized articles with pagination and searching options."
      },
      "post": {
        "tags": [
          "BBS"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Article information to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IBbsArticle.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created article.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IBbsArticleIBbsArticle.ISnapshot"
                }
              }
            }
          }
        },
        "summary": "Create a new article",
        "description": "Create a new article.\n\nCreate a new article with its first {@link IBbsArticle.ISnapshot snapshot}."
      }
    },
    "/bbs/articles/{id}": {
      "get": {
        "tags": [
          "BBS"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Target article's ",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Article information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IBbsArticleIBbsArticle.ISnapshot"
                }
              }
            }
          }
        },
        "summary": "Read individual article",
        "description": "Read individual article.\n\nReads an article with its every {@link IBbsArticle.ISnapshot snapshots}."
      },
      "patch": {
        "tags": [
          "BBS"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Target article's ",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Article information to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IBbsArticle.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly accumulated snapshot information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IBbsArticleIBbsArticle.ISnapshot"
                }
              }
            }
          }
        },
        "summary": "Update an article",
        "description": "Update an article.\n\nAccumulate a new {@link IBbsArticle.ISnapshot snapshot} record to the article."
      },
      "delete": {
        "tags": [
          "BBS"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Target article's ",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Erase an article",
        "description": "Erase an article.\n\nPerforms soft deletion to the article."
      }
    },
    "/conventions/snake": {
      "post": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "description": "Target string to convert",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Converted string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Convert string to snake case",
        "description": "Convert string to snake case.\n\nConverts a given string to snake case. No matter what the input is,\nthe output will be in snake case."
      }
    },
    "/conventions/camel": {
      "post": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "description": "Target string to convert",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Converted string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Convert string to camel case",
        "description": "Convert string to camel case.\n\nConverts a given string to camel case. No matter what the input is,\nthe output will be in camel case."
      }
    },
    "/conventions/pascal": {
      "post": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "description": "Target string to convert",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Converted string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Convert string to pascal case",
        "description": "Convert string to pascal case.\n\nConverts a given string to pascal case. No matter what the input is,\nthe output will be in pascal case."
      }
    },
    "/mathmatics/{x}/{y}/plus": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "x",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "description": "The first value",
            "required": true
          },
          {
            "name": "y",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "description": "The second value",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The sum of two numbers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "summary": "Plus operation",
        "description": "Plus operation.\n\nCompute the sum of two numbers."
      }
    },
    "/mathmatics/{x}/{y}/minus": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "x",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "description": "The first value",
            "required": true
          },
          {
            "name": "y",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "description": "The second value",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The difference of two numbers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "summary": "Minus operation",
        "description": "Minus operation.\n\nCompute the difference of two numbers."
      }
    },
    "/mathmatics/{x}/{y}/multiply": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "x",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "description": "The first value",
            "required": true
          },
          {
            "name": "y",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "description": "The second value",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The product of two numbers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "summary": "Multiply operation",
        "description": "Multiply operation.\n\nCompute the product of two numbers."
      }
    },
    "/mathmatics/{x}/{y}/divide": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "x",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "description": "The first value",
            "required": true
          },
          {
            "name": "y",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "description": "The second value",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The quotient of two numbers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "summary": "Divide operation",
        "description": "Divide operation.\n\nCompute the quotient of two numbers."
      }
    },
    "/vector/{index}": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "index",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        }
      }
    },
    "/vector": {
      "post": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "number"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        }
      }
    },
    "/vector/pop": {
      "delete": {
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/vector/data": {
      "get": {
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vector/clear": {
      "delete": {
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "IBbsArticle.IRequestIBbsArticle.IRequest.ISearchIBbsArticle.IRequest.SortableColumns": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IBbsArticle.IRequest.ISearch",
            "title": "Search condition",
            "description": "Search condition."
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "-title",
                "-created_at",
                "-updated_at",
                "+title",
                "+created_at",
                "+updated_at"
              ]
            },
            "title": "Sort condition",
            "description": "Sort condition."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "default": 100,
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "nullable": false
      },
      "IBbsArticle.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "title_or_body": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        },
        "nullable": false,
        "description": "검색 정보."
      },
      "IPageIBbsArticle.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IBbsArticle.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "nullable": false,
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IPage.IPagination": {
        "type": "object",
        "properties": {
          "current": {
            "type": "integer",
            "title": "Current page number",
            "description": "Current page number."
          },
          "limit": {
            "type": "integer",
            "default": 100,
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          },
          "records": {
            "type": "integer",
            "title": "Total records in the database",
            "description": "Total records in the database."
          },
          "pages": {
            "type": "integer",
            "title": "Total pages",
            "description": "Total pages.\n\nEqual to {@link records } / {@link limit } with ceiling."
          }
        },
        "nullable": false,
        "required": [
          "current",
          "limit",
          "records",
          "pages"
        ],
        "description": "Page information."
      },
      "IBbsArticle.ISummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "title": {
            "type": "string",
            "title": "Title of the last snapshot",
            "description": "Title of the last snapshot."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the article",
            "description": "Creation time of the article."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Modification time of the article",
            "description": "Modification time of the article.\n\nIn other words, the time when the last snapshot was created."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "title",
          "created_at",
          "updated_at"
        ],
        "description": "Summarized information of the article."
      },
      "IBbsArticleIBbsArticle.ISnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IBbsArticle.ISnapshot"
            },
            "minItems": 1,
            "title": "List of snapshot contents",
            "description": "List of snapshot contents.\n\nIt is created for the first time when an article is created, and is\naccumulated every time the article is modified."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of article",
            "description": "Creation time of article."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "snapshots",
          "created_at"
        ],
        "description": "Article entity.\n\n`IBbsArticle* is a super-type entity of all kinds of articles in the current\nbackend system, literally shaping individual articles of the bulletin board.\n\nAnd, as you can see, the elements that must inevitably exist in the article,\nsuch as the `title` or the `body`, do not exist in the `IBbsArticle`, but exist\nin the subsidiary entity, {@link IBbsArticle.ISnapshot }, as a 1: N relationship,\nwhich is because a new snapshot record is published every time the article is\nmodified.\n\nThe reason why a new snapshot record is published every time the article is\nmodified is to preserve the evidence. Due to the nature of e-community, there\nis always a threat of dispute among the participants. And it can happen that\ndisputes arise through articles or {@link IBbsArticleComment comments}, and to\nprevent such things as modifying existing articles to manipulate the situation,\nthe article is designed in this structure.\n\nIn other words, to keep evidence, and prevent fraud."
      },
      "IBbsArticle.ISnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of snapshot record",
            "description": "Creation time of snapshot record.\n\nIn other words, creation time or update time or article."
          },
          "format": {
            "$ref": "#/components/schemas/IBbsArticle.Format",
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "created_at",
          "format",
          "title",
          "body",
          "files"
        ],
        "description": "Snapshot of article.\n\n`IBbsArticle.ISnapshot` is a snapshot entity that contains the contents of\nthe article, as mentioned in {@link IBbsArticle }, the contents of the article\nare separated from the article record to keep evidence and prevent fraud."
      },
      "IBbsArticle.Format": {
        "type": "string",
        "enum": [
          "txt",
          "md",
          "html"
        ]
      },
      "IAttachmentFile.ICreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "File name, except extension",
            "description": "File name, except extension.\n\nPossible to make empy string like `.gitignore` case."
          },
          "extension": {
            "type": "string",
            "maxLength": 8,
            "minLength": 1,
            "nullable": true,
            "title": "Extension",
            "description": "Extension.\n\nPossible to omit like `README` case."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "title": "URL path of the real file",
            "description": "URL path of the real file."
          }
        },
        "nullable": false,
        "required": [
          "name",
          "extension",
          "url"
        ]
      },
      "IBbsArticle.ICreate": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "enum": [
              "txt",
              "md",
              "html"
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "nullable": false,
        "required": [
          "format",
          "title",
          "body",
          "files"
        ],
        "description": "Store content type of the article."
      }
    }
  }
}