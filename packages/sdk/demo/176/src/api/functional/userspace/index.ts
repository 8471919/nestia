/**
 * @packageDocumentation
 * @module api.functional.userspace
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher, Primitive } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";

import type { Userspace } from "./../../structures/Userspace";

/**
 * @controller UserspaceController.type1()
 * @path GET /userspace/type1
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function type1
    (
        connection: IConnection
    ): Promise<type1.Output>
{
    return Fetcher.fetch
    (
        connection,
        type1.ENCRYPTED,
        type1.METHOD,
        type1.path()
    );
}
export namespace type1
{
    export type Output = Primitive<Userspace.UserType1>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/userspace/type1";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/userspace/type1`;
    }
}

/**
 * @controller UserspaceController.type2()
 * @path GET /userspace/type2
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function type2
    (
        connection: IConnection
    ): Promise<type2.Output>
{
    return Fetcher.fetch
    (
        connection,
        type2.ENCRYPTED,
        type2.METHOD,
        type2.path()
    );
}
export namespace type2
{
    export type Output = Primitive<Userspace.UserType2>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/userspace/type2";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/userspace/type2`;
    }
}