import ts from "typescript";
import { IJsDocTagInfo } from "typia";

import { INestiaProject } from "../../structures/INestiaProject";
import { ITypedHttpRoute } from "../../structures/ITypedHttpRoute";
import { FilePrinter } from "./FilePrinter";
import { ImportDictionary } from "./ImportDictionary";
import { SdkHttpFunctionProgrammer } from "./SdkHttpFunctionProgrammer";
import { SdkHttpNamespaceProgrammer } from "./SdkHttpNamespaceProgrammer";

export namespace SdkHttpRouteProgrammer {
  export const write =
    (project: INestiaProject) =>
    (importer: ImportDictionary) =>
    (route: ITypedHttpRoute): ts.Statement[] => {
      const props = {
        headers: route.parameters.find(
          (p) => p.category === "headers" && p.field === undefined,
        ),
        query: route.parameters.find(
          (p) => p.category === "query" && p.field === undefined,
        ),
        input: route.parameters.find((p) => p.category === "body"),
      };
      return [
        FilePrinter.description(
          SdkHttpFunctionProgrammer.write(project)(importer)(route, props),
          describe(route),
        ),
        SdkHttpNamespaceProgrammer.write(project)(importer)(route, props),
      ];
    };

  const describe = (route: ITypedHttpRoute): string => {
    // MAIN DESCRIPTION
    const comments: string[] = route.description
      ? route.description.split("\n")
      : [];

    // COMMENT TAGS
    const tags: IJsDocTagInfo[] = route.jsDocTags.filter(
      (tag) =>
        tag.name !== "param" ||
        route.parameters
          .filter((p) => p.category !== "headers")
          .some((p) => p.name === tag.text?.[0]?.text),
    );
    if (tags.length !== 0) {
      const content: string[] = tags.map((t) =>
        t.text?.length
          ? `@${t.name} ${t.text.map((e) => e.text).join("")}`
          : `@${t.name}`,
      );
      comments.push("", ...new Set(content));
    }

    // EXCEPTIONS
    for (const [key, value] of Object.entries(route.exceptions)) {
      if (
        comments.some(
          (str) =>
            str.startsWith(`@throw ${key}`) || str.startsWith(`@throws ${key}`),
        )
      )
        continue;
      comments.push(
        value.description?.length
          ? `@throws ${key} ${value.description.split("\n")[0]}`
          : `@throws ${key}`,
      );
    }

    // POSTFIX
    if (!!comments.length) comments.push("");
    comments.push(
      `@controller ${route.controller.name}.${route.name}`,
      `@path ${route.method} ${route.path}`,
      `@nestia Generated by Nestia - https://github.com/samchon/nestia`,
    );
    return comments.join("\n");
  };
}
